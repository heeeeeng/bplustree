package bplustree

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *KV) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Key":
			z.Key, err = dc.ReadBytes(z.Key)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "Value":
			z.Value, err = dc.ReadBytes(z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *KV) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Key"
	err = en.Append(0x82, 0xa3, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Key)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	// write "Value"
	err = en.Append(0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Value)
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *KV) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Key"
	o = append(o, 0x82, 0xa3, 0x4b, 0x65, 0x79)
	o = msgp.AppendBytes(o, z.Key)
	// string "Value"
	o = append(o, 0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendBytes(o, z.Value)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *KV) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Key":
			z.Key, bts, err = msgp.ReadBytesBytes(bts, z.Key)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "Value":
			z.Value, bts, err = msgp.ReadBytesBytes(bts, z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *KV) Msgsize() (s int) {
	s = 1 + 4 + msgp.BytesPrefixSize + len(z.Key) + 6 + msgp.BytesPrefixSize + len(z.Value)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *KVs) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(KVs, zb0002)
	}
	for zb0001 := range *z {
		var field []byte
		_ = field
		var zb0003 uint32
		zb0003, err = dc.ReadMapHeader()
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		for zb0003 > 0 {
			zb0003--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			switch msgp.UnsafeString(field) {
			case "Key":
				(*z)[zb0001].Key, err = dc.ReadBytes((*z)[zb0001].Key)
				if err != nil {
					err = msgp.WrapError(err, zb0001, "Key")
					return
				}
			case "Value":
				(*z)[zb0001].Value, err = dc.ReadBytes((*z)[zb0001].Value)
				if err != nil {
					err = msgp.WrapError(err, zb0001, "Value")
					return
				}
			default:
				err = dc.Skip()
				if err != nil {
					err = msgp.WrapError(err, zb0001)
					return
				}
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z KVs) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0004 := range z {
		// map header, size 2
		// write "Key"
		err = en.Append(0x82, 0xa3, 0x4b, 0x65, 0x79)
		if err != nil {
			return
		}
		err = en.WriteBytes(z[zb0004].Key)
		if err != nil {
			err = msgp.WrapError(err, zb0004, "Key")
			return
		}
		// write "Value"
		err = en.Append(0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
		if err != nil {
			return
		}
		err = en.WriteBytes(z[zb0004].Value)
		if err != nil {
			err = msgp.WrapError(err, zb0004, "Value")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z KVs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0004 := range z {
		// map header, size 2
		// string "Key"
		o = append(o, 0x82, 0xa3, 0x4b, 0x65, 0x79)
		o = msgp.AppendBytes(o, z[zb0004].Key)
		// string "Value"
		o = append(o, 0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
		o = msgp.AppendBytes(o, z[zb0004].Value)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *KVs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(KVs, zb0002)
	}
	for zb0001 := range *z {
		var field []byte
		_ = field
		var zb0003 uint32
		zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		for zb0003 > 0 {
			zb0003--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			switch msgp.UnsafeString(field) {
			case "Key":
				(*z)[zb0001].Key, bts, err = msgp.ReadBytesBytes(bts, (*z)[zb0001].Key)
				if err != nil {
					err = msgp.WrapError(err, zb0001, "Key")
					return
				}
			case "Value":
				(*z)[zb0001].Value, bts, err = msgp.ReadBytesBytes(bts, (*z)[zb0001].Value)
				if err != nil {
					err = msgp.WrapError(err, zb0001, "Value")
					return
				}
			default:
				bts, err = msgp.Skip(bts)
				if err != nil {
					err = msgp.WrapError(err, zb0001)
					return
				}
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z KVs) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0004 := range z {
		s += 1 + 4 + msgp.BytesPrefixSize + len(z[zb0004].Key) + 6 + msgp.BytesPrefixSize + len(z[zb0004].Value)
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *LeafNode) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Kvs":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Kvs")
				return
			}
			if cap(z.Kvs) >= int(zb0002) {
				z.Kvs = (z.Kvs)[:zb0002]
			} else {
				z.Kvs = make(KVs, zb0002)
			}
			for za0001 := range z.Kvs {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Kvs", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Kvs", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Key":
						z.Kvs[za0001].Key, err = dc.ReadBytes(z.Kvs[za0001].Key)
						if err != nil {
							err = msgp.WrapError(err, "Kvs", za0001, "Key")
							return
						}
					case "Value":
						z.Kvs[za0001].Value, err = dc.ReadBytes(z.Kvs[za0001].Value)
						if err != nil {
							err = msgp.WrapError(err, "Kvs", za0001, "Value")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Kvs", za0001)
							return
						}
					}
				}
			}
		case "Count":
			z.Count, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
		case "P":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "P")
					return
				}
				z.P = nil
			} else {
				if z.P == nil {
					z.P = new(InteriorNode)
				}
				err = z.P.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "P")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *LeafNode) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Kvs"
	err = en.Append(0x83, 0xa3, 0x4b, 0x76, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Kvs)))
	if err != nil {
		err = msgp.WrapError(err, "Kvs")
		return
	}
	for za0001 := range z.Kvs {
		// map header, size 2
		// write "Key"
		err = en.Append(0x82, 0xa3, 0x4b, 0x65, 0x79)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Kvs[za0001].Key)
		if err != nil {
			err = msgp.WrapError(err, "Kvs", za0001, "Key")
			return
		}
		// write "Value"
		err = en.Append(0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Kvs[za0001].Value)
		if err != nil {
			err = msgp.WrapError(err, "Kvs", za0001, "Value")
			return
		}
	}
	// write "Count"
	err = en.Append(0xa5, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Count)
	if err != nil {
		err = msgp.WrapError(err, "Count")
		return
	}
	// write "P"
	err = en.Append(0xa1, 0x50)
	if err != nil {
		return
	}
	if z.P == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.P.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "P")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *LeafNode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Kvs"
	o = append(o, 0x83, 0xa3, 0x4b, 0x76, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Kvs)))
	for za0001 := range z.Kvs {
		// map header, size 2
		// string "Key"
		o = append(o, 0x82, 0xa3, 0x4b, 0x65, 0x79)
		o = msgp.AppendBytes(o, z.Kvs[za0001].Key)
		// string "Value"
		o = append(o, 0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
		o = msgp.AppendBytes(o, z.Kvs[za0001].Value)
	}
	// string "Count"
	o = append(o, 0xa5, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.Count)
	// string "P"
	o = append(o, 0xa1, 0x50)
	if z.P == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.P.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "P")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LeafNode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Kvs":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Kvs")
				return
			}
			if cap(z.Kvs) >= int(zb0002) {
				z.Kvs = (z.Kvs)[:zb0002]
			} else {
				z.Kvs = make(KVs, zb0002)
			}
			for za0001 := range z.Kvs {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Kvs", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Kvs", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Key":
						z.Kvs[za0001].Key, bts, err = msgp.ReadBytesBytes(bts, z.Kvs[za0001].Key)
						if err != nil {
							err = msgp.WrapError(err, "Kvs", za0001, "Key")
							return
						}
					case "Value":
						z.Kvs[za0001].Value, bts, err = msgp.ReadBytesBytes(bts, z.Kvs[za0001].Value)
						if err != nil {
							err = msgp.WrapError(err, "Kvs", za0001, "Value")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Kvs", za0001)
							return
						}
					}
				}
			}
		case "Count":
			z.Count, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
		case "P":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.P = nil
			} else {
				if z.P == nil {
					z.P = new(InteriorNode)
				}
				bts, err = z.P.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "P")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *LeafNode) Msgsize() (s int) {
	s = 1 + 4 + msgp.ArrayHeaderSize
	for za0001 := range z.Kvs {
		s += 1 + 4 + msgp.BytesPrefixSize + len(z.Kvs[za0001].Key) + 6 + msgp.BytesPrefixSize + len(z.Kvs[za0001].Value)
	}
	s += 6 + msgp.IntSize + 2
	if z.P == nil {
		s += msgp.NilSize
	} else {
		s += z.P.Msgsize()
	}
	return
}
